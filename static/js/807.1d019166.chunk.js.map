{"version":3,"file":"static/js/807.1d019166.chunk.js","mappings":"wPAKMA,EAAU,SAACC,GACf,OAAOC,EAAAA,cACL,SAACC,EAAA,EAAa,CAACC,GAAIH,EAAMI,KAAMC,eAAa,EAACC,QAAS,CAAEC,MAAO,EAAGC,KAAM,KAAM,UAC5E,gBAAKC,UAAU,iBAAgB,UAC7B,iBAAKA,UAAU,cAAa,WAC1B,oBACA,oBACA,oBACA,oBACA,oBACA,oBACA,oBACA,oBACA,oBACA,oBACA,oBACA,0BAINC,SAASC,eAAe,QAE5B,EACA,EAAeC,EAAAA,KAAWb,E,yICqB1B,EA3C2B,SAACC,GAC1B,IAAIa,EAAUC,KAAKC,MAAMf,EAAMgB,KAAKC,aAAe,IAC/CC,EAAUJ,KAAKC,MAAMf,EAAMgB,KAAKC,aAAe,IAC/CE,EAAQnB,EAAMgB,KAAKG,MACnBC,EAAO,OAKX,OAJID,EAAQ,OACVA,GAASA,EAAQ,MAAME,QAAQ,GAC/BD,EAAO,QAEFnB,EAAAA,cACL,SAACC,EAAA,EAAa,CAACC,GAAIH,EAAMI,KAAMC,eAAa,EAACC,QAAS,CAAEC,MAAO,EAAGC,KAAM,KAAM,UAC5E,gBAAKC,UAAU,sBAAqB,UAClC,gBAAKA,UAAS,8BAAiCa,QAAS,SAACC,GAAC,OAAKA,EAAEC,iBAAiB,EAAC,UACjF,iBAAKf,UAAU,qCAAoC,WACjD,gBAAIA,UAAU,GAAE,WACd,gDAAgC,qBAChC,kBAAMA,UAAU,mBAAkB,UAAET,EAAMgB,KAAKS,WAAU,WAE3D,iBAAKhB,UAAU,GAAE,WACf,SAAC,KAAS,CAACA,UAAU,OAAOiB,OAAQ,GAAG,UACrC,SAAC,KAAY,CACXC,MAAOC,WAAW5B,EAAMgB,KAAKS,YAC7BI,QAAQ,UACRC,MAAM,OACNC,UAAQ,OAGZ,iBAAKtB,UAAU,kCAAiC,WAC9C,iBAAKA,UAAU,sBAAqB,wBAAMU,EAAK,YAAIC,OACnD,iBAAKX,UAAU,sBAAqB,UACjCS,EAAU,EAAC,UAAMA,EAAO,YAAa,GAAE,YACvCL,EAAU,EAAC,UAAMA,EAAO,YAAa,qBAQpDH,SAASC,eAAe,QAE5B,E,qBCtBA,EAnBsB,WACpB,IAAMqB,GAAUC,EAAAA,EAAAA,KAAY,SAACC,GAAK,OAAKA,EAAMF,OAAO,IAC9CG,GAAWF,EAAAA,EAAAA,KAAY,SAACC,GAAK,OAAKA,EAAMC,QAAQ,IACtD,OACE,iCACE,SAAC,KAAU,KACX,iBAAK1B,UAAU,mFAAkF,WAC/F,SAAC,KAAS,KACV,gBAAKA,UAAU,wBAAuB,UACpC,SAAC,KAAU,OAEb,SAAC,KAAS,QAEZ,SAAC,EAAkB,CAACL,KAAM+B,EAASC,SAAUpB,KAAMmB,KACnD,SAACpC,EAAA,EAAO,CAACK,KAAM4B,EAAQK,gBAG7B,C","sources":["components/Spinner/Spinner.js","components/custom_notification/CustomNotification.js","layout/DefaultLayout.js"],"sourcesContent":["import React from 'react'\nimport ReactDOM from 'react-dom'\nimport { CSSTransition } from 'react-transition-group'\nimport './Spinner.css'\n\nconst Spinner = (props) => {\n  return ReactDOM.createPortal(\n    <CSSTransition in={props.show} unmountOnExit timeout={{ enter: 0, exit: 300 }}>\n      <div className=\"custom-spinner\">\n        <div className=\"lds-default\">\n          <div></div>\n          <div></div>\n          <div></div>\n          <div></div>\n          <div></div>\n          <div></div>\n          <div></div>\n          <div></div>\n          <div></div>\n          <div></div>\n          <div></div>\n          <div></div>\n        </div>\n      </div>\n    </CSSTransition>,\n    document.getElementById('root'),\n  )\n}\nexport default React.memo(Spinner)\n","import { CProgress, CProgressBar } from '@coreui/react-pro'\nimport React from 'react'\nimport ReactDOM from 'react-dom'\nimport { CSSTransition } from 'react-transition-group'\nimport './CustomNotification.css'\n\nconst CustomNotification = (props) => {\n  let seconds = Math.floor(props.data.durationTime % 60)\n  let minutes = Math.floor(props.data.durationTime / 60)\n  let speed = props.data.speed\n  let unit = 'KB/s'\n  if (speed > 1024) {\n    speed = (speed / 1024).toFixed(2)\n    unit = 'MB/s'\n  }\n  return ReactDOM.createPortal(\n    <CSSTransition in={props.show} unmountOnExit timeout={{ enter: 0, exit: 300 }}>\n      <div className=\"custom-notification\">\n        <div className={`custom-notification-content`} onClick={(e) => e.stopPropagation()}>\n          <div className=\"custom-notification-body text-left\">\n            <h5 className=\"\">\n              <strong>Uploading File </strong> &nbsp;&nbsp;&nbsp;&nbsp;\n              <span className=\"text-muted small\">{props.data.percentage}%</span>\n            </h5>\n            <div className=\"\">\n              <CProgress className=\"mb-1\" height={10}>\n                <CProgressBar\n                  value={parseFloat(props.data.percentage)}\n                  variant=\"striped\"\n                  color=\"info\"\n                  animated\n                />\n              </CProgress>\n              <div className=\"d-flex justify-content-between \">\n                <div className=\"small text-disabled\"> {`${speed} ${unit}`}</div>\n                <div className=\"small text-disabled\">\n                  {minutes > 0 ? `${minutes} minutes` : ''} &nbsp;&nbsp;\n                  {seconds > 0 ? `${seconds} seconds` : ''}\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </CSSTransition>,\n    document.getElementById('root'),\n  )\n}\n\nexport default CustomNotification\n","import React from 'react'\nimport { useSelector } from 'react-redux'\nimport CustomNotification from 'src/components/custom_notification/CustomNotification'\nimport Spinner from 'src/components/Spinner/Spinner'\nimport { AppContent, AppSidebar, AppFooter, AppHeader } from '../components/index'\n\nconst DefaultLayout = () => {\n  const loading = useSelector((state) => state.loading)\n  const progress = useSelector((state) => state.progress)\n  return (\n    <>\n      <AppSidebar />\n      <div className=\"wrapper d-flex flex-column min-vh-100 bg-light bg-opacity-50 dark:bg-transparent\">\n        <AppHeader />\n        <div className=\"body flex-grow-1 px-3\">\n          <AppContent />\n        </div>\n        <AppFooter />\n      </div>\n      <CustomNotification show={progress.isUpload} data={progress}></CustomNotification>\n      <Spinner show={loading.showLoading} />\n    </>\n  )\n}\n\nexport default DefaultLayout\n"],"names":["Spinner","props","ReactDOM","CSSTransition","in","show","unmountOnExit","timeout","enter","exit","className","document","getElementById","React","seconds","Math","floor","data","durationTime","minutes","speed","unit","toFixed","onClick","e","stopPropagation","percentage","height","value","parseFloat","variant","color","animated","loading","useSelector","state","progress","isUpload","showLoading"],"sourceRoot":""}