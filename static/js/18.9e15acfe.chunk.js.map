{"version":3,"file":"static/js/18.9e15acfe.chunk.js","mappings":"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","sources":["components/Spinner/Spinner.js","service/auth/Auth.js","schemas/login.js","views/pages/login/Login.js"],"sourcesContent":["import React from 'react'\nimport ReactDOM from 'react-dom'\nimport { CSSTransition } from 'react-transition-group'\nimport './Spinner.css'\n\nconst Spinner = (props) => {\n  return ReactDOM.createPortal(\n    <CSSTransition in={props.show} unmountOnExit timeout={{ enter: 0, exit: 300 }}>\n      <div className=\"custom-spinner\">\n        <div className=\"lds-default\">\n          <div></div>\n          <div></div>\n          <div></div>\n          <div></div>\n          <div></div>\n          <div></div>\n          <div></div>\n          <div></div>\n          <div></div>\n          <div></div>\n          <div></div>\n          <div></div>\n        </div>\n      </div>\n    </CSSTransition>,\n    document.getElementById('root'),\n  )\n}\nexport default React.memo(Spinner)\n","import apiInstance from '../ApiConfig'\n\nexport const serviceLogin = async (fields) => {\n  return apiInstance\n    .post(`/authentication/login`, fields)\n    .then((response) => {\n      return response.data\n    })\n    .catch((err) => {\n      return err.response.data\n    })\n}\n","import * as yup from 'yup'\n\nexport const loginSchema = yup.object().shape({\n  usermail: yup.string().required('This value is required.'),\n  password: yup.string().required('This value is required.'),\n})\n","import React from 'react'\nimport { /*Link,*/ useNavigate } from 'react-router-dom'\nimport {\n  CButton,\n  CCard,\n  CCardBody,\n  CCol,\n  CContainer,\n  CForm,\n  CFormCheck,\n  CFormInput,\n  CImage,\n  CRow,\n} from '@coreui/react-pro'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { authAction } from 'src/store/actions/authActions'\nimport { serviceLogin } from 'src/service/auth/Auth'\nimport Spinner from 'src/components/Spinner/Spinner'\nimport { useFormik } from 'formik'\nimport { loginSchema } from 'src/schemas/login'\nimport './Login.scss'\n\nconst Login = () => {\n  const navigate = useNavigate()\n  const loading = useSelector((state) => state.loading)\n  const dispatch = useDispatch()\n  const formik = useFormik({\n    initialValues: {\n      usermail: '',\n      password: '',\n    },\n    onSubmit: async (values) => {\n      const jsonData = await serviceLogin(values)\n      if (jsonData.status === '200') {\n        const { merchant_account_status, ...data } = jsonData.data\n        dispatch(authAction({ ...data }))\n        navigate('/dashboard')\n      } else if (jsonData.status === '403') {\n      } else if (jsonData.status === '422') {\n      }\n    },\n    validationSchema: loginSchema,\n  })\n  return (\n    <div className=\"bg-light min-vh-100 d-flex flex-row align-items-center\">\n      <CContainer>\n        <CRow className=\"justify-content-center\">\n          <CCol md={10} lg={7} className=\"login-container\">\n            <div className=\" logo-container\">\n              <CImage src={'logo.png'} className=\"\" alt=\"admin@bootstrapmaster.com\" />\n            </div>\n            <CCard className=\"p-4 login-form-container\">\n              <CCardBody>\n                <CForm onSubmit={formik.handleSubmit} className=\"login-content\">\n                  <div className=\"form-title\">\n                    <h1 className=\"login-title\">Welcome back</h1>\n                    <p className=\"text-medium-emphasis login-secondary\">Sign In to your account</p>\n                  </div>\n                  <div className=\"form-field\">\n                    <div className=\"field-username\">\n                      <CFormInput\n                        name=\"usermail\"\n                        label=\"Username\"\n                        placeholder=\"Username\"\n                        autoComplete=\"username\"\n                        invalid={formik.errors?.usermail && formik.touched?.usermail}\n                        value={formik.values.usermail}\n                        onChange={formik.handleChange}\n                        onBlur={formik.handleBlur}\n                        feedback={formik.errors?.usermail}\n                      />\n                    </div>\n                    <div className=\"field-password\">\n                      <CFormInput\n                        type=\"password\"\n                        name=\"password\"\n                        label=\"Password\"\n                        placeholder=\"Password\"\n                        autoComplete=\"current-password\"\n                        invalid={formik.errors?.password && formik.touched?.password}\n                        value={formik.values.password}\n                        onChange={formik.handleChange}\n                        onBlur={formik.handleBlur}\n                        feedback={formik.errors?.password}\n                      />\n                    </div>\n                    <div className=\"login-option\">\n                      <div className=\"option-remember\">\n                        <CFormCheck id=\"remember\" label=\"Remember me\" />\n                      </div>\n                      <div className=\"option-forgot\">\n                        <CButton color=\"link\" className=\"\">\n                          Forgot password?\n                        </CButton>\n                      </div>\n                    </div>\n                    {/* <CRow>\n                      <CCol xs={6}>\n                        <CButton type=\"submit\" color=\"primary\" className=\"px-4\">\n                          Login\n                        </CButton>\n                      </CCol>\n                    </CRow> */}\n                  </div>\n                  <div className=\"d-grid gap-2 col-12 mx-auto\">\n                    <CButton type=\"submit\" color=\"primary\" className=\"btn btn-block\">\n                      Login\n                    </CButton>\n                  </div>\n                </CForm>\n              </CCardBody>\n            </CCard>\n          </CCol>\n        </CRow>\n      </CContainer>\n      <Spinner show={loading.showLoading} />\n    </div>\n  )\n}\n\nexport default Login\n"],"names":["Spinner","props","ReactDOM","CSSTransition","in","show","unmountOnExit","timeout","enter","exit","className","document","getElementById","React","serviceLogin","fields","apiInstance","then","response","data","catch","err","loginSchema","yup","shape","usermail","required","password","navigate","useNavigate","loading","useSelector","state","dispatch","useDispatch","formik","useFormik","initialValues","onSubmit","values","jsonData","status","merchant_account_status","authAction","validationSchema","md","lg","src","alt","handleSubmit","name","label","placeholder","autoComplete","invalid","errors","touched","value","onChange","handleChange","onBlur","handleBlur","feedback","type","id","color","showLoading"],"sourceRoot":""}